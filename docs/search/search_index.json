{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Welcome! let a = \"b\"; $a = \"B\" What It Does ... (image: \"docker service create\" + \"docker service update\" + JSON = docker service deploy) ... Docker Service Deploy is a simple abstraction layer over the docker service create and docker service update commands. Furthermore, it adds a declarative JSON format to describe the service to be deployed. The whole thing comes as a command line tool and as a .Net library. An Alternative To Docker Stack It's all quite similar (and heavily inspired by) Docker Stacks , and indeed, the tooling is set up to be relatively easy to migrate from- and to. Reasons for creating Docker Service Deploy (CAUTION: Opinions incoming): Conceptual differences, prone to personal preferences: Only a single service per deployment item No new conceptual layer (\"stacks\") on top of services Environments (development, production, etc.) are built-in and (can be) part of the service spec Declarative service format as JSON instead of YAML Features that Docker Stack is missing (at the time of writing): Doesn't support binding to the local \"nat\" network on Windows hosts (\"host\" ports won't work) When deploying \"ingress\" ports, containers cannot be accessed from the localhost No \"attached\" way of deploying, which means that during deployment, there is no way to wait for the deployment to complete (either successfully or otherwise) Stacks seem to only exist as a concept in the docker-cli, which means they are kinda hard to manage using the Engine API As a result of the previous points, there is no way to use the declarative Docker Compose format to deploy a Stack through the Engine API","title":"Overview"},{"location":"#overview","text":"Welcome! let a = \"b\"; $a = \"B\"","title":"Overview"},{"location":"#what-it-does","text":"... (image: \"docker service create\" + \"docker service update\" + JSON = docker service deploy) ... Docker Service Deploy is a simple abstraction layer over the docker service create and docker service update commands. Furthermore, it adds a declarative JSON format to describe the service to be deployed. The whole thing comes as a command line tool and as a .Net library.","title":"What It Does"},{"location":"#an-alternative-to-docker-stack","text":"It's all quite similar (and heavily inspired by) Docker Stacks , and indeed, the tooling is set up to be relatively easy to migrate from- and to. Reasons for creating Docker Service Deploy (CAUTION: Opinions incoming): Conceptual differences, prone to personal preferences: Only a single service per deployment item No new conceptual layer (\"stacks\") on top of services Environments (development, production, etc.) are built-in and (can be) part of the service spec Declarative service format as JSON instead of YAML Features that Docker Stack is missing (at the time of writing): Doesn't support binding to the local \"nat\" network on Windows hosts (\"host\" ports won't work) When deploying \"ingress\" ports, containers cannot be accessed from the localhost No \"attached\" way of deploying, which means that during deployment, there is no way to wait for the deployment to complete (either successfully or otherwise) Stacks seem to only exist as a concept in the docker-cli, which means they are kinda hard to manage using the Engine API As a result of the previous points, there is no way to use the declarative Docker Compose format to deploy a Stack through the Engine API","title":"An Alternative To Docker Stack"},{"location":"commands/deploy-service/","text":"Command - Deploy Service Deploys a docker service using a 'service.json' service specification file. Syntax docker-service-deploy deploy-service --model file.json #!/bin/bash docker-service-deploy deploy-service --model file.json docker-service-deploy deploy-service --model file.json public class Bleh { public string Test1 { get; set; } }","title":"Deploy Service"},{"location":"commands/deploy-service/#command-deploy-service","text":"Deploys a docker service using a 'service.json' service specification file.","title":"Command - Deploy Service"},{"location":"commands/deploy-service/#syntax","text":"docker-service-deploy deploy-service --model file.json #!/bin/bash docker-service-deploy deploy-service --model file.json docker-service-deploy deploy-service --model file.json public class Bleh { public string Test1 { get; set; } }","title":"Syntax"},{"location":"commands/expand-service-model/","text":"Command - Expand Service Model Reads a service.json file, expands any environment variables using the specified environment name, and prints the resulting model.","title":"Expand Service Model"},{"location":"commands/expand-service-model/#command-expand-service-model","text":"Reads a service.json file, expands any environment variables using the specified environment name, and prints the resulting model.","title":"Command - Expand Service Model"},{"location":"commands/test-auth-config/","text":"Command - Test Auth Config Attempts to load auth from the local .docker/config.json file to see if it's accessible.","title":"Test Auth Config"},{"location":"commands/test-auth-config/#command-test-auth-config","text":"Attempts to load auth from the local .docker/config.json file to see if it's accessible.","title":"Command - Test Auth Config"},{"location":"getting-started/create-an-image/","text":"","title":"Create an Image"},{"location":"getting-started/deploy-a-service/","text":"Deploy A Service Now it's time to deploy a service. This can be done using the command line tool, or through the .Net library. Using the command line tool Using the library","title":"Deploy a Service"},{"location":"getting-started/deploy-a-service/#deploy-a-service","text":"Now it's time to deploy a service. This can be done using the command line tool, or through the .Net library. Using the command line tool Using the library","title":"Deploy A Service"},{"location":"getting-started/install-docker/","text":"Install Docker General information on how to install Docker on the available operating systems can be found here: docker.com - Get Docker Windows Server Take note that when looking for \"Install Docker on Windows\", 9 out of 10 results point to Docker Desktop. This is nice for development, but you don't want to do this on Windows Server 2016+ installations. The short version (all powershell): # Enable the \"Containers\" feature Install-WindowsFeature Containers -Restart # Install the Docker package provider Install-Module -Name DockerMsftProvider -Repository PSGallery -Force # Install Docker Install-Package -Name docker -ProviderName DockerMsftProvider # Start the Docker service Start-Service Docker Test it out. docker run hello-world For a longer explanation, see this post from Elton Stoneman : Getting Started with Docker on Windows Server 2019 Linux The quickest way to get Docker working on Linux, is probably using the convenience script. This script automatically detects the distribution in use and pulls in all the required bits. This is not necessarily the best way though, since it might not correctly detect the running distro, and it also requires sudo, after which it executes a pile of scripts that directly come from the internet. Having given you those warning, here you go : curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh","title":"Install Docker"},{"location":"getting-started/install-docker/#install-docker","text":"General information on how to install Docker on the available operating systems can be found here: docker.com - Get Docker","title":"Install Docker"},{"location":"getting-started/install-docker/#windows-server","text":"Take note that when looking for \"Install Docker on Windows\", 9 out of 10 results point to Docker Desktop. This is nice for development, but you don't want to do this on Windows Server 2016+ installations. The short version (all powershell): # Enable the \"Containers\" feature Install-WindowsFeature Containers -Restart # Install the Docker package provider Install-Module -Name DockerMsftProvider -Repository PSGallery -Force # Install Docker Install-Package -Name docker -ProviderName DockerMsftProvider # Start the Docker service Start-Service Docker Test it out. docker run hello-world For a longer explanation, see this post from Elton Stoneman : Getting Started with Docker on Windows Server 2019","title":"Windows Server"},{"location":"getting-started/install-docker/#linux","text":"The quickest way to get Docker working on Linux, is probably using the convenience script. This script automatically detects the distribution in use and pulls in all the required bits. This is not necessarily the best way though, since it might not correctly detect the running distro, and it also requires sudo, after which it executes a pile of scripts that directly come from the internet. Having given you those warning, here you go : curl -fsSL https://get.docker.com -o get-docker.sh sudo sh get-docker.sh","title":"Linux"},{"location":"getting-started/setup-swarm/","text":"Setup Swarm With at least a single node running and Docker installed, we need to setup a Docker Swarm Cluster . This is quite easy, and can be done with a single command (replace the IP address with that of the node). First Node docker swarm init --advertise-addr 192.168.1.25 The IP is not strictly necessary, but especially when running on a host with multiple IP's, this prevents issues with Docker choosing the wrong address and multiple nodes not being able to talk to one another. Obtain a join token using the following command: docker swarm join-token worker For all the other nodes, run the following command to connect to the first node (replace the IP address with that of the node): All Other Nodes docker swarm join <token> --advertise-addr 192.168.1.26 Deployments can only be done from manager nodes. It's advisable to have either 3 or 5 manager nodes in a cluster.","title":"Setup Swarm"},{"location":"getting-started/setup-swarm/#setup-swarm","text":"With at least a single node running and Docker installed, we need to setup a Docker Swarm Cluster . This is quite easy, and can be done with a single command (replace the IP address with that of the node). First Node docker swarm init --advertise-addr 192.168.1.25 The IP is not strictly necessary, but especially when running on a host with multiple IP's, this prevents issues with Docker choosing the wrong address and multiple nodes not being able to talk to one another. Obtain a join token using the following command: docker swarm join-token worker For all the other nodes, run the following command to connect to the first node (replace the IP address with that of the node): All Other Nodes docker swarm join <token> --advertise-addr 192.168.1.26 Deployments can only be done from manager nodes. It's advisable to have either 3 or 5 manager nodes in a cluster.","title":"Setup Swarm"},{"location":"library/deploy-service/","text":"","title":"Create Service"},{"location":"service-spec/basics/","text":"Service Specification A service can be specified using JSON, the format is heavily based on the Docker Compose format, to allow for easy migration between either format. { \"environments\": { \"Development\": { \"\" } }, \"sample-api\": { \"prop\": 42 } }","title":"Basics"},{"location":"service-spec/basics/#service-specification","text":"A service can be specified using JSON, the format is heavily based on the Docker Compose format, to allow for easy migration between either format. { \"environments\": { \"Development\": { \"\" } }, \"sample-api\": { \"prop\": 42 } }","title":"Service Specification"}]}